const e="import { Buck, from } from '@buckdb/isomorphic' // Assuming buckdb is in the same directory or adjust path\n\n// Optional: Configure connection if needed, otherwise uses default\n// const buckCon = Buck({ /* credentials */ });\n\nconsole.log('--- BuckDB TypeScript Parser Showcase ---')\n\n// --- SELECT Clause Showcase ---\nconsole.log('\\n--- SELECT Showcase ---')\ntry {\n    await from('duckdb_settings()', 's')\n        .select((s, D) => ({\n            setting_name: s.name,\n            description_upper: D.upper(s.description),\n            value_type: s.input_type,\n            is_numeric: s.input_type.Like('%INTEGER%') || s.input_type.Like('%FLOAT%'),\n            config_info: D.Varchar(`Setting: ${s.name} - Type: ${s.input_type}`), // Template literal example\n            example_struct: { name: s.name, value: D.Integer(123), nested: { flag: D.Boolean(true) } }, // Struct/Object\n            example_list: D.List([s.name, s.description, D.Varchar('literal')]), // List/Array\n            casted_name: s.name.as('Varchar', 50), // Simple Cast\n            complex_cast: D.cast(s.name, 'Varchar', 50), // Complex Cast\n            conditional_desc: s.description !== null ? s.description : D.Varchar('No description'), // Ternary/CASE WHEN\n            numeric_example: D.abs(-5).add(D.sqrt(16)).multiply(2), // Arithmetic and Functions\n            regex_example: D.regexp_replace(s.name, /_/, '-'), // Regex function\n            json_literal: D.Json({ key: 'value', num: 1 }), // JSON Literal\n            date_literal: D.Date('2024-01-01'), // Date Literal\n        }))\n        .limit(5)\n        .execute()\n    console.log('SELECT Showcase executed successfully.')\n} catch (error) {\n    console.error('Error during SELECT Showcase:', error)\n}\n\n// --- WHERE Clause Showcase ---\nconsole.log('\\n--- WHERE Showcase ---')\ntry {\n    const thresholdOid = 16000 // Example context variable\n    const excludePattern = '%internal%' // Example context variable\n    const allowedSchemas = ['main', 'pg_catalog', 'information_schema'] // Example context variable\n    const minParams = 1\n\n    await from('duckdb_functions()', 'f')\n        .context({ thresholdOid, excludePattern, allowedSchemas, minParams }) // Pass external variables\n        .select(f => ({\n            name: f.function_name,\n            params: f.parameters,\n            return: f.return_type,\n            schema: f.schema_name,\n        }))\n        .where((f, D) =>\n            f.schema_name.In(allowedSchemas) // IN operator with context array\n            && (f.parameters.length >= minParams || f.return_type === 'BOOLEAN') // Logical OR, >=, context number\n            && !f.function_name.Like(excludePattern) // NOT LIKE with context string\n            && D.Between(1, 12, 41)\n            && f.description !== null // IS NOT NULL\n            && f.function_oid > D.Bigint(thresholdOid) // Greater than with context number + explicit type\n            && f.function_name.SimilarTo(/^[a-z_]+$/i) // SimilarTo with Regex (case-insensitive flag)\n            && !f.return_type.In(['UNKNOWN', 'INVALID']) // NOT IN\n            && f.function_type === 'immutable' // Equality check\n            && f.function_oid.Between(10000, 20000) // BETWEEN operator\n        )\n        .orderBy(f => f.function_name) // Simple ORDER BY\n        .limit(10)\n        .execute()\n    console.log('WHERE Showcase executed successfully.')\n} catch (error) {\n    console.error('Error during WHERE Showcase:', error)\n}\n\n// --- ORDER BY and OFFSET Showcase ---\nconsole.log('\\n--- ORDER BY / OFFSET Showcase ---')\ntry {\n    await from('duckdb_types()', 't')\n        .select(t => ({ type_name: t.type_name, oid: t.type_oid, category: t.type_category }))\n        .orderBy(['category', 'ASC NULLS LAST']) // ORDER BY ASC NULLS FIRST\n        // .orderBy(t => t.type_oid, 'DESC') // Multiple ORDER BY clauses\n        .limit(5)\n        .offset(2) // OFFSET clause\n        .execute()\n    console.log('ORDER BY / OFFSET Showcase executed successfully.')\n} catch (error) {\n    console.error('Error during ORDER BY / OFFSET Showcase:', error)\n}\n";export{e as default};
