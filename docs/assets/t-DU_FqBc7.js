const e="// import { Buck, from } from '@workspace/tsconfig.json'\nimport { MemoryDB } from '@buckdb/isomorphic'\nimport { json_serialize_sql } from '../fn'\nimport { generateInterface } from '../src/interface-generator'\nimport { unnest, duckdb_secrets, pragma_metadata_info, pragma_show, pragma_storage_info, pragma_table_info, check_peg_parser, checkpoint, force_checkpoint, generate_series, glob, json_each, json_execute_serialized_sql, json_tree, parquet_bloom_probe, parquet_file_metadata, parquet_kv_metadata, parquet_metadata, parquet_schema, range, sql_auto_complete, test_all_types, which_secret, load_aws_credentials, rtree_index_dump, shapefile_meta, sqlite_attach, ST_GeneratePoints, pragma_user_agent, duckdb_indexes }\n    from '../tf'\n\nconst paramfuncs = ['pragma_storage_info', 'pragma_table_info', 'pragma_show', 'check_peg_parser', 'checkpoint', 'force_checkpoint', 'generate_series', 'glob', 'json_each', 'json_execute_serialized_sql', 'json_tree', 'parquet_bloom_probe', 'parquet_file_metadata', 'parquet_kv_metadata', 'parquet_metadata', 'parquet_schema', 'range', 'sql_auto_complete', 'test_all_types', 'which_secret', 'load_aws_credentials', 'rtree_index_dump', 'shapefile_meta', 'sqlite_attach',]\n\nconst TableFuncs = `duckdb_columns\nduckdb_constraints\nduckdb_databases\nduckdb_dependencies\nduckdb_extensions\nduckdb_external_file_cache\nduckdb_functions\nduckdb_indexes\nduckdb_keywords\nduckdb_log_contexts\nduckdb_logs\nduckdb_memory\nduckdb_optimizers\nduckdb_prepared_statements\nduckdb_schemas\nduckdb_secret_types\nduckdb_secrets\nduckdb_sequences\nduckdb_settings\nduckdb_tables\nduckdb_temporary_files\nduckdb_types\nduckdb_variables\nduckdb_views\npragma_collations\npragma_database_size\npragma_metadata_info\npragma_platform\npragma_rtree_index_info\npragma_user_agent\npragma_version\ncheck_peg_parser\ncheckpoint\nforce_checkpoint\ngenerate_series\nglob\nicu_calendar_names\njson_each\njson_execute_serialized_sql\njson_tree\nparquet_bloom_probe\nparquet_file_metadata\nparquet_kv_metadata\nparquet_metadata\nparquet_schema\npg_timezone_names\nrange\nsql_auto_complete\ntest_all_types\nwhich_secret\nload_aws_credentials\nregister_geoarrow_extensions\nrtree_index_dump\nshapefile_meta\nsqlite_attach\nST_Drivers`\n    .split('\\n').filter(e => !paramfuncs.includes(e))\nconst pr = `\n\n`.split('\\n').filter(Boolean)\n// await MemoryDB.from(test_all_types()).show({js:true})\n// const r2 = parquet_metadata('data/demo.parquet')\n// console.log(generateInterface({ '': { '': null } }))\n// const xxr = await MemoryDB.from('r2').returnType\n// .select().show()\n\n// console.log({ r2 })\n// const r1 = `pragma_table_info(\"sqlite_master\")` as 'pragma_table_info(\"sqlite_master\")'\n// const rrrrrr = await MemoryDB.from('duckdb_typesess()').show()\n// .select('sqd')\n// .show({ table: false })\n// const unnest = unnest(['from sqlite_master'])\n// await MemoryDB.from().show()\n\nMemoryDB.loadExtensions('h3', 'aws', 'azure', 'delta', 'excel', 'fts', 'httpfs', 'iceberg', 'inet', 'spatial', 'sqlite_scanner', 'ui')\nawait MemoryDB.create('tbl').as(\n    [\n        {\n            id: 1,\n            name: 'John Doe',\n            age: 30,\n        }\n    ]\n).execute()\nconst resp = await MemoryDB.run(`\nINSTALL spatial;\nLOAD spatial;\n\n-- Create a table with 10_000_000 random points\nCREATE TABLE t1 AS SELECT point::GEOMETRY AS geom\nFROM st_generatepoints(\n        {min_x: 0, min_y: 0, max_x: 10_000, max_y: 10_000}::BOX_2D,\n        100,\n        14\n    );\n\n-- Create an index on the table\nCREATE INDEX my_idx ON t1 USING RTREE (geom);\n\n-- Perform a query with a \"spatial predicate\" on the indexed geometry\n-- column. Note how the second argument in this case,\n-- the ST_MakeEnvelope call is a \"constant\"\nSELECT count(*)\nFROM t1\nWHERE ST_Within(geom, ST_MakeEnvelope(450, 450, 650, 650));\n`) as DuckDBMaterializedResult\nawait MemoryDB.from(duckdb_indexes()).show()\n// const resp2 = await MemoryDB.run(`CREATE INDEX idx_tbl_table ON tbl(name)`) as DuckDBMaterializedResult\n// console.log(await resp2.getRowObjectsJson())\n\nasync function main() {\n    // await MemoryDB.run(`CREATE INDEX idx_tbl_table ON tbl(name)`)\n    await MemoryDB.from(pragma_storage_info('tbl')).execute()\n    await MemoryDB.from(pragma_table_info('tbl')).execute()\n    await MemoryDB.from(pragma_show('tbl')).execute()\n\n    await MemoryDB.from(check_peg_parser('')).execute()\n    await MemoryDB.from(checkpoint()).execute()\n    await MemoryDB.from(force_checkpoint()).execute()\n    await MemoryDB.from(generate_series(1, 3, 1)).execute()\n    await MemoryDB.from(glob('*')).execute()\n    await MemoryDB.from(json_each('[]')).execute()\n    // await MemoryDB.from(json_execute_serialized_sql(json_serialize_sql('SELECT 1 + 2'))).execute()\n    await MemoryDB.from(json_tree('{}')).execute()\n    await MemoryDB.from(parquet_bloom_probe('data/people.parquet', 'age', 1)).execute()\n    await MemoryDB.from(parquet_file_metadata('data/people.parquet')).execute()\n    await MemoryDB.from(parquet_kv_metadata('data/people.parquet')).execute()\n    await MemoryDB.from(parquet_metadata('data/people.parquet')).execute()\n    await MemoryDB.from(parquet_schema('data/people.parquet')).execute()\n    await MemoryDB.from(range(1, 2, 1)).execute()\n    await MemoryDB.from(sql_auto_complete('SEL')).execute()\n    await MemoryDB.from(test_all_types()).execute()\n    await MemoryDB.from(which_secret('t', 'n')).execute()\n    await MemoryDB.from(load_aws_credentials('c')).execute()\n    await MemoryDB.from(rtree_index_dump('my_idx')).execute()\n    await MemoryDB.from(shapefile_meta('s.shp')).execute()\n    await MemoryDB.from(sqlite_attach('data/chinook.db')).execute()\n    await MemoryDB.from(ST_GeneratePoints([0, 0, 10_000, 10_000], 10, 10))\n    for (const tf of TableFuncs) {\n        console.log('------tf')\n        await MemoryDB.from(`${tf}()`).show({ js: true })\n    }\n}\nmain()\n\n// ST_GeneratePoints({ min_x: 0, min_y: 0, max_x: 10, max_y: 10 }:: BOX_2D, 5, 42)\n\n// for await (const x of pr) {\n//     const zzz = await MemoryDB.from(x).execute()\n//     console.log({ zzz })\n//     // console.log({ x })\n// }\n\n// console.log({  })\n// for await (const x of r) {\n//     // from()\n//     console.log({ x })\n// }\n\n// MemoryDB.from(read_parquet('../data/people.parquet'), 'people')\n// .select('age')\n\n// const rrr = glob('file:/me/dev/*')\n// from(rrr)\n// .select()\n\n// const SC = Buck('/me/dev/buckdb/data/european_soccer_database.sqlite')\n// Buck('').from('duckdb_functions()').select(e => ({ xx: e }))\n\n// const rrr = glob('lol')\n\n\n\n// SC.from('Player').select(e => ({\n//     xxx: e.height`Double`,\n// }))\n\n\n\n\n\n\n// const resp = await from('duckdb_functions()')\n//     .select(e => `__${e.function_name}_${e.return_type}__`)\n//     .where(e => !!e.function_name && !!e.return_type)\n//     .limit(3)\n//     .dump()\n//     .execute()\n// console.log({ resp })\n\n// const r = await from('s3://a1738/testxs2.jsonl')\n//     .select((e, D) => [e.id, e.ss.gg, e.testxs2.xxx.lol])\n//     .execute()\n\n// // const buckCon = Buck({\n// //     s3_access_key_id: 'GXSS9O33ILIPZ9YVSKE0',\n// //     s3_secret_access_key: 'Uqs1er2IXhzd9mcdnPKEzNzzaCy4f1EhEbX30ufE',\n// //     s3_endpoint: 's3.eu-west-2.wasabisys.com',\n// // })\n\n// // const resp = await buckCon\n// // .from('s3://maldon/boldair.parquet')\n// //     .execute()\n// // console.log({ resp })\n\n// // const resp = await Buck('').describe('duckdb_settings()')\n// // const resp = await from('s3://a1738/testxs2.jsonl')\n// //     .select((e) => ({  xxx: e.xxx.json_pretty() }))\n// //     .execute()\"\"\n// // console.log({ resp })\n// from('data/people.parquet')\n//     .select(e => ({ xxx: e.name }))\n//     .execute()\n// from('data/people.parquet')\n//     .select(e => ({ xxx: e.name }))\n//     .execute()\n\n// // const resp = await Buck('s3://duckdb-blobs/databases/stations.duckdb').from('Stations').select().execute()\n\n// // console.log({ resp })\n\n// // console.log(JSON.stringify(resp42))\n// // console.log(JSON.stringify(resp42.schema, null, 2))\n// // const zcon = Buck('lol')\n// // // console.log({ buckCon })\n// // // const schema = await buckCon.fetchSchema('s3://dallas/turf.fr.parquet')\n\n// // // const resp = await buckCon.ddb.upsertSchema('s3://dallas/turf.fr.parquet', schema)\n// // const rrr = await buckCon.from('s3://dallas/turf.fr.parquet')\n// //     .select(e => ({ dxx: e.adresse }))\n// //     .execute()\n// // console.log({ rrr })\n// // // const tablejson = await Bun.file('./.buck/models.json').json()\n// // // console.log({ schema, tablejson })\n// // // .select().execute()\n// // // .attach('s3://bucket-name/file.duckdb', 'xfile')\n";export{e as default};
