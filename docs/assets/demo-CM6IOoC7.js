const e="import { Buck, from } from '@buckdb/isomorphic'\nfrom('Fsq_os_places_eu', 'f')\n    .select(({ f, base_location }, D) => ({\n        location: D.ST_Point(f.longitude, f.latitude),\n        _latitude: f.latitude,\n        distance_meters: D.round(\n            D.ST_Distance_Spheroid(\n                D.ST_Point(f.longitude, f.latitude),\n                base_location.center\n            ),\n            2\n        )\n    }))\n\n\n\n// console.log(q.toSql())\n// db.from('repos.parquet')\n\n// from('repo_pairs').select()\n\n// .select(e => e.)\n\n\n\n\n\n// .keyBy(e => e.database_name)\n// .groupBy('function_name')\n// .groupBy(e => e.has_side_effects.Ilike('%whatever%'))\n\n\n// const resp = await q.execute()\n\n// const BS = Buck('s3://a1738/')\n\n// const resp = await BS.from('sqlite_master').exec()\n// await Buck('s3://a1738/').from('files/macif.parquet').exec()\n\n\n\n// Buck('s3://a1738/akira09.db').from('Category')\n\n// Buck('s3://a1738/stations.duckdb').from('Stations')\n\n// Buck('https://blobs.duckdb.org/databases/stations.duckdb').from('Stations')\n\n\n// .from('&')\n\n// Buck('').with(\n//     (db) => ({ xx3: db.from('duckdb_functions()').select('database_name', 'description') }),\n//     db2 => ({ zz3: db2.from('xx3').select('database_name') })\n// ).from('zz3').select('database_name')\n\n\n\n\n// from('duckdb_functions()')\n// const r =\n//     Buck('')\n//         // .\n//         .from('duckdb_functions()')\n//         .where(e => e)\n\n\n// from('duckdb_functions()').where(e => e)\n// Buck('/me/dev/buckdb').from('chinok.duckdb')\n\n\n\n// //### 123 test abel\n\n// // from('s3://a1738/files/macif.parquet')\n// //     .select(e => ({ com: e.titleComiteo ?? e.city ?? '123' }))\n// //     .union(\n// //         from('data/people.parquet').select()\n// //     )\n\n// const f = MemoryDB.from('duckdb_functions()')\n\n// MemoryDB.from('duckdb_functions()')\n// .select((x, D) => [x.parameters.map(z => z)])\n\n// MemoryDB.from('duckdb_functions()')\n//     .select((e, D) => ({\n//         // mm: e.parameters.array_transform(x => x.upper()),\n//         zoi: D.list_reduce(e.parameters, (rtn, z) => rtn + ' ' + z, ''),\n//         // oi: D.array_transform(e.parameters, z => z.upper()),\n//         // xxx: e.parameter_types.list_transform(x => x.lower())\n//     }))\n//     // .where(z => z.comment.Ilike('%qd'))\n\n// MemoryDB.from('duckdb_functions()')\n//     .select((geo, D) => D.Varchar(geo.function_name + ' ' + 'dqs'))\n\n// // .select((geo, D) => geo.function_oid ? geo.function_oid.round(2) : D.Integer(0))\n// // .select((e, D) => [e.function_oid.round(2), !!e.description && !!e.comment ? e.description + ' ' + e.comment : D.Varchar('NOPZ')])\n// // .execute()\n\n// await MemoryDB.from('duckdb_functions()')\n//     .select(({ description, examples, ...rest }) => ({\n//         ...rest,\n//         description: description ? description : 'xxx',\n//     })).execute(); // Exclude a field\n\n// await from('duckdb_settings()', 's')\n//     .select((s, D) => ({\n//         setting_name: s.name,\n//         description_upper: D.upper(s.description),\n//         value_type: s.input_type,\n//         match: s.name.regexp_extract_all(/\\d+/),\n//         config_info: D.Varchar(`Setting: ${s.name} - Type: ${s.input_type}`), // Template literal example\n//         example_struct: { name: s.name, value: D.Integer(123), nested: { flag: D.Boolean(true) } }, // Struct/Object\n//         example_list: D.List([s.name, s.description, D.Varchar('literal')]), // List/Array\n//         casted_name: s.name.as('Varchar', 50), // Simple Cast\n//         // complex_cast: D.cast(s.name, 'Varchar', 50), // Complex Cast\n//         conditional_desc: s.description !== null ? s.description : D.Varchar('No description'), // Ternary/CASE WHEN\n//         numeric_example: D.abs(-5).add(D.sqrt(16)).multiply(2), // Arithmetic and Functions\n//         regex_example: D.regexp_replace(s.name, /_/, '-'), // Regex function\n//         json_literal: D.Json({ key: 'value', num: 1 }), // JSON Literal\n//         date_literal: D.Date('2024-01-01'), // Date Literal\n//     }))\n//     // .where(s => s.input_type.Like('%INTEGER%') || s.input_type.Like('%FLOAT%'))\n//     .execute()\n\n// // const resp = await from(read_json('s3://a1738/jj.jsonl', {auto_detect: true}))\n// // .select(e =>  [e.cc])\n// // .execute()\n\n// const resp5 = await Buck('').from('s3://a1738/jj.jsonl')\n//     .select(e => [e.cc, e.codeApe])\n//     .execute()\n\n// // const resp3 = await from(read_csv('s3://a1738/files/zipcodes.fr.csv', {\n// //     auto_detect: true\n// // }))\n// // .select(e => [e.name, e.zipcodes])\n// // .execute()\n// // .select(e => e.cc)\n\n// const xxxzx = await from('s3://a1738/testxs2.jsonl')\n//     .select(e => e)\n//     .execute()\n\n// const oiiz = await from('s3://a1738/files/macif.parquet')\n//     .select(e => ({ xx: e.benefits, zz: e.demo, ff: e.created }))\n//     .execute()\n\n// const xxxz = await from('s3://a1738/files/macif.parquet')\n//     .select(e => ({ xx: e.benefits }))\n//     .keyBy(e => e.city)\n//     .execute()\n\n// const xxxdz = await from('s3://a1738/files/macif.parquet')\n//     .select(e => e.id)\n//     .execute()\n// // .then(x => x[0])\n// // .then(e => e[0].\n\n// // from('duckdb_functions()')\n// // .select('function_name')\n// // .groupBy('function_name')\n\n// // from('duckdb_functions()')\n// //     .select((e, D) => ({\n// //         // tttt: e.parameter_types.apply(x => x + '__'),\n// //         zzz: D.list_apply(e.parameter_types, x => x.levenshtein('--')),\n// //         // uuu: [123, 31, 1].reduce((x, y) => x+y),\n// //         // xx: [1, 2, 3].reduce((x, z) => x+z),\n// //         // rrrr: e.parameter_types.reduce((a, b) => a+'::' +b, '')\n// //     }))\n\n// // Buck('', {\n// //     s3_access_key_id: 'AKIAR6FAVD6WRREXAMPQ',\n// //     s3_region: 'eu-west-3',\n// //     s3_secret_access_key: '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',\n// // })\n// //     .from('duckdb_functions()')\n// //     .select((e, D) => ({\n\n// //         // trtr: e.\n// //         id: e.function_name,\n// //         xxx: D.Json({ lol: 'str', toto: [1, 2, 3] }),\n// //         ss: D.Struct({\n// //             vv: 'II', gg: 123, s: D.Struct({ values: [12, 41, 12] })\n// //         })\n// //     }))\n// //     .where(e => e.function_name in ['read_json', 'read_json_auto'])\n\n// // from(`s3://a1738/testxs2.jsonl`)\n// //     .select()\n// //     .groupBy('ALL')\n// //     .execute()\n// // // .then(e => e.map(z => z.))\n\n// // // const con2 = Buck('s3://a1738/xakila.duckdb', {\n// // //     s3_region: 'eu-west-3'\n// // // })\n\n// // // from('s3://a1738/files/20230823-communes-departement-region.csv')\n// // // .select((p, D) => [p.code_postal,  {xx:p.latitude}])\n// // // .execute()\n\n// // // Buck('')\n\n// // // from('s3://a1738/files/macif.parquet').select('')\n// // // const toto = \"gg1111xx\"\n\n// const con2 = Buck({\n//     s3_access_key_id: 'GXSS9O33ILIPZ9YVSKE0',\n//     s3_secret_access_key: 'Uqs1er2IXhzd9mcdnPKEzNzzaCy4f1EhEbX30ufE',\n//     s3_endpoint: 's3.eu-west-2.wasabisys.com'\n// })\n\n// // // from('')\n\n// const resp = await con2.from('Stations', 'ST').select(p => ({ pp p.code, xx: p.id, gg: p.geo_lat }))\n//     .execute()\n\n// await buckCon.from('duckdb_functions()')\n//     .select(({ database_name, datab, ...fns }) => ({ ...fns, schema_name: 'xxxxxx' }))\n//     // .where(e => e.function_name === 'len')\n//     // .copyTo('s3://dallas/uu.csv', {\n//     //     delim: '\\\\t',\n//     // })\n//     .execute()\n\n// await buckCon.from('duckdb_functions()', 'ddf')\n//     // .join('data/final.csv', e => e.final.pid === e.ddf.database_oid)\n//     .select((e, D) => ({\n//         xxzz: e.ddf.database_oid.ascii() + 'lol',\n//         // ['zz']: e.parameters['abel'],\n//         name: e.function_name,\n//         xxx: D.Varchar(\"ab'el\"),\n//         zz: e.parameters,\n//         // zz: D.List([{lol:'123'}, {lol:'yoyo'}])\n//         uu: D.Json({ toot: 12 })\n//     }))\n//     .copyTo('s3://dallas/zzz.parquet')\n//     //  .where(e => e.examples.len() > 0)\n//     //  .orderBy()\n//     //  .limit(10)\n\n//     .execute()\n\n// // qsdqsdqsdqsdqsdqsdqsdqsdqsdqsdqsdq\n\n// await from('duckdb_settings()').select((p, D) => [p.name, p.description, D.SimilarTo(p.name, /.+ll.+/g) ? 'en' : 'ko'])\n\n// await from('duckdb_functions()')\n//     .select(e => ({\n//         at: e.function_name.regexp_extract_all(/(e)/, 1),\n//         ggg: e.database_name + 'lol',\n//         ggx: `${e.database_name}lol${'123'}`,\n//         xxz: e.database_name.len() + 12,\n//         uuu: 12,\n//         _: e.function_name\n//     }))\n//     // .where(e => e.database_name === 'lol' && e.xxz > 12 && e.function_oid.Between(12, 41))\n//     // .where(e => 12 > 3 && e.uuu)\n//     .execute()\n\n// from('s3://dallas/zzz.parquet')\n\n// await from<any>('https://m.abe.lc/public/opendata/geopop.csv', 'leo')\n//     .select((p, D) => ({\n//         l: D.SimilarTo(p.name, /12\\d+/) ? p.lat.acosh() : D.Bigint(42),\n//         lg: p.lng,\n//         nm: p.name,\n//         dd: D.Bigint(12)\n//     }))\n//     .where(e => e.name.Like('%nn%') && e.lat > 12 && e.name.SimilarTo(/cxxx/img) && e.name !== '123')\n//     .where(e => e.lat.abs() > 12 && e.lng.abs() === 12 && e.lng.abs().subtract(421) > 12)\n//     // .where((e, D) => e.lat.as('Bigint') ===  D.cast(e.lng.abs(), 'Bigint'))\n//     // .where(e => !e.leo.pop.isfinite())\n//     .execute()\n\n// const thresholdOid = 16000; // Example context variable\n// const excludePattern = '%internal%'; // Example context variable\n// const allowedSchemas = ['main', 'pg_catalog', 'information_schema']; // Example context variable\n// const minParams = 1;\n\n// await from('duckdb_functions()', 'f')\n//     .context({ thresholdOid: 16000, excludePattern: '%intern%', allowedSchemas: ['main', 'pg_catalog', 'information_schema'], minParams: 1, }) // Pass external variables\n//     .select(f => ({\n//         name: f.function_name,\n//         params: f.parameters,\n//         return: f.return_type,\n//         schema: f.schema_name\n//     }))\n//     .where((f, D) =>\n//         f.schema_name.In(allowedSchemas) && // IN operator with context array\n//         (D.Array(f.parameters).len() >= minParams || f.return_type === 'BOOLEAN') && // Logical OR, >=, context number\n//         !f.function_name.Like(excludePattern) && // NOT LIKE with context string\n//         // D(1, 12, 41) &&\n//         f.description !== null && // IS NOT NULL\n//         f.function_oid > D.Bigint(thresholdOid) && // Greater than with context number + explicit type\n//         f.function_name.SimilarTo(/^[a-z_]+$/i) && // SimilarTo with Regex (case-insensitive flag)\n//         !f.return_type.In(['UNKNOWN', 'INVALID']) && // NOT IN\n//         f.function_type === 'immutable' && // Equality check\n//         f.function_oid.Between(10000, 20000) // BETWEEN operator\n//     )\n//     .or('21>12')\n//     // .orderBy(f => f.function_name) // Simple ORDER BY\n//     .limit(10)\n//     .execute();\n";export{e as default};
