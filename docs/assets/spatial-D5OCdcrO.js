const e="import { Buck } from '@buckdb/isomorphic'\nimport { from } from '@buckdb/isomorphic'\n\nconst SP = Buck('file:///me/dev/buckdb/data/spatial_lite.db', { access_mode: 'READ_ONLY' }).loadExtensions('spatial')\n\nSP.from('Center')\n    .select('center').select()\n\n// await SP.create('Center', { ifNotExists: true })\n//     .as([\n//         { center: [48.8866, 2.3431] }\n//     ]).execute()\n\nconst resp = await SP.from('Center').select('center').execute()\nSP.from('Center')\n    .select((e, D) => ({\n        center: D.ST_Point(e.center[2], e.center[1]),\n        // a: e.center[1],\n        // b: e.center[2],\n    }))\n// console.log({ resp })\n\n\nconst nearbyStorePairs = SP.with(\n    db => ({\n        base_location: db.from('Center')\n            .select((e, D) => ({\n                uuu: `123`,\n                center: D.ST_Point(e.center[2], e.center[1])\n            })),\n    }),\n    db => ({\n        nearby_stores: db.from('Fsq_os_places_eu', 'f')\n            .crossJoin('base_location')\n            .select(({ f, base_location }, D) => ({\n                fsq_place_id: f.fsq_place_id,\n                name: f.name,\n                _longitude: f.longitude,\n                _latitude: f.latitude,\n                location: D.ST_Point(f.longitude, f.latitude),\n                distance_meters: D.round(\n                    D.ST_Distance_Spheroid(\n                        D.ST_Point(f.longitude, f.latitude),\n                        base_location.center\n                    ),\n                    2\n                )\n            }))\n            .where(({ f, base_location }, D) =>\n                f.date_closed.IsNull()\n                && D.ST_Distance_Spheroid(\n                    D.ST_Point(f.longitude, f.latitude),\n                    base_location.center\n                ) <= 100\n            )\n    })\n)\n    .from('nearby_stores', 'a')\n    .join('nearby_stores', 'b').on(({ a, b }, D) =>\n        a.fsq_place_id < b.fsq_place_id &&\n        D.ST_DWithin(a.location, b.location, 2)\n    )\n    .select(({ a, b }, D) => ({\n        store1: a.name,\n        location1: a._latitude.as('Varchar') + ', ' + a._longitude.as('Varchar'),\n        store2: b.name,\n        location2: b._latitude.as('Varchar') + ', ' + b._longitude.as('Varchar'),\n        distance_meters: D.round(D.ST_Distance(a.location, b.location), 2)\n    }))\n    .orderBy('distance_meters')\n    .limit(200)\n\nconst results = await nearbyStorePairs.execute()\nconsole.log(`Found ${results.length} nearby store pairs`)\nconsole.table(results)\n";export{e as default};
