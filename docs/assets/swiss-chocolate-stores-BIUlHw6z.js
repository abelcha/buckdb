const n="import { Buck } from '@buckdb/isomorphic'\nimport { array_contains, round, ST_Distance_Spheroid, ST_Point } from '../fn'\n\nconst SP = Buck('file:///me/dev/buckdb/data/spatial_lite.db', {\n    access_mode: 'READ_WRITE'\n})\n    .loadExtensions('spatial')\n\n// Create temporary city centers data\nawait SP.create('swiss_cities', { ifNotExists: true })\n    .as([\n        { city_name: 'Zurich', center_lon: 8.5417, center_lat: 47.3769 },\n        { city_name: 'Geneva', center_lon: 6.1432, center_lat: 46.2044 },\n        { city_name: 'Bern', center_lon: 7.4474, center_lat: 46.9480 },\n        { city_name: 'Basel', center_lon: 7.5886, center_lat: 47.5596 },\n        { city_name: 'Luzern', center_lon: 8.3093, center_lat: 47.0505 }\n    ]).execute()\n\n\nconst swissChocolateStores =\n    SP.with(\n        db => ({\n            city_centers: db.from('swiss_cities')\n                .select((e, D) => ({\n                    city_name: e.city_name,\n                    center: ST_Point(e.center_lon, e.center_lat),\n                    lon_min: e.center_lon - 0.05,\n                    lon_max: e.center_lon + 0.05,\n                    lat_min: e.center_lat - 0.05,\n                    lat_max: e.center_lat + 0.05\n                }))\n        }),\n        db => ({\n            stores_by_city: db.from('Fsq_os_places_eu', 'p')\n                .crossJoin('city_centers', 'c')\n                .select(({ p, c }, D) => ({\n                    city_name: c.city_name,\n                    store_name: p.name,\n                    distance_from_center: round(\n                        ST_Distance_Spheroid(\n                            ST_Point(p.longitude, p.latitude),\n                            c.center\n                        ),\n                        2\n                    )\n                }))\n                .where(({ p, c }, D) =>\n                    array_contains(p.fsq_category_ids, '52f2ab2ebcbc57f1066b8b31')\n                    && p.country === 'CH'\n                    && p.longitude >= c.lon_min && p.longitude <= c.lon_max\n                    && p.latitude >= c.lat_min && p.latitude <= c.lat_max\n                    && ST_Distance_Spheroid(ST_Point(p.longitude, p.latitude), c.center) <= 5000\n                )\n        })\n    )\n        .from('stores_by_city', 's')\n        .select(({ s }, D) => ({\n            city_name: s.city_name,\n            total_stores: D.count(),\n            stores_per_km2: round(D.count() / 78.54, 2),\n            closest_stores: D.Raw(`(SELECT string_agg(store_name) FROM (\n                SELECT store_name FROM stores_by_city s2 \n                WHERE s2.city_name = s.city_name \n                ORDER BY distance_from_center LIMIT 3\n            ))`),\n        }))\n        .groupBy(({ s }) => s.city_name)\n        .orderBy('total_stores', 'DESC')\n\nconst results = await swissChocolateStores.execute()\nconsole.log(`Found chocolate store analysis for ${results.length} Swiss cities`)\nconsole.table(results)\n";export{n as default};
