const t="import { describe, expect, it } from 'bun:test'\n// import { formatSource } from './formalise'\n\n// it('formatSource', () => {\n//     const fm = (catalog: string, uri: string) => formatSource({ uri, catalog })\n//     expect(fm('', 'tt.json')).toBe(`'tt.json'`)\n//     expect(fm('s3://lol/toto', 'tt.json')).toBe(`'s3://lol/toto/tt.json'`)\n//     expect(fm('s3://lol/toto//', 'tt.json')).toBe(`'s3://lol/toto/tt.json'`)\n//     expect(fm('file:///lol/toto//', 'tt.parquet')).toBe(`'file:///lol/toto/tt.parquet'`)\n//     expect(fm('', 'repo_pairs')).toBe(`repo_pairs`)\n//     expect(fm('file:///lol/toto//', 'repo_pairs')).toBe(`repo_pairs`)\n// })\n\n\n// describe('formatOptions', () => {\n//     it('should handle auto field_ids', () => {\n//         const result = formatOptions({ field_ids: 'auto' })\n//         expect(result).toBe(\"FIELD_IDS 'auto'\")\n//     })\n\n//     it('should handle single column field_ids', () => {\n//         const result = formatOptions({ field_ids: { i: 42 } })\n//         expect(result).toBe('FIELD_IDS {i: 42}')\n//     })\n\n//     it('should handle multiple columns field_ids', () => {\n//         const result = formatOptions({ field_ids: { i: 42, j: 43 } })\n//         expect(result).toBe('FIELD_IDS {i: 42, j: 43}')\n//     })\n\n//     it('should handle nested struct field_ids', () => {\n//         const result = formatOptions({\n//             field_ids: {\n//                 my_struct: {\n//                     __duckdb_field_id: 42,\n//                     i: 43,\n//                 },\n//             },\n//         })\n//         expect(result).toBe('FIELD_IDS {my_struct: {__duckdb_field_id: 42, i: 43}}')\n//     })\n\n//     it('should handle list field_ids', () => {\n//         const result = formatOptions({\n//             field_ids: {\n//                 my_list: {\n//                     __duckdb_field_id: 42,\n//                     element: 43,\n//                 },\n//             },\n//         })\n//         expect(result).toBe('FIELD_IDS {my_list: {__duckdb_field_id: 42, element: 43}}')\n//     })\n\n//     it('should handle map field_ids', () => {\n//         const result = formatOptions({\n//             field_ids: {\n//                 my_map: {\n//                     __duckdb_field_id: 42,\n//                     key: 43,\n//                     value: 44,\n//                 },\n//             },\n//         })\n//         expect(result).toBe('FIELD_IDS {my_map: {__duckdb_field_id: 42, key: 43, value: 44}}')\n//     })\n\n//     it('should handle multiple options', () => {\n//         const result = formatOptions({\n//             field_ids: { i: 42 },\n//             compression: 'snappy',\n//             row_group_size: 100000,\n//         })\n//         expect(result).toBe(\"FIELD_IDS {i: 42},\\nCOMPRESSION 'snappy',\\nROW_GROUP_SIZE 100000\")\n//     })\n// })\n";export{t as default};
