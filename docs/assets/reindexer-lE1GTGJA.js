const e="import { Buck, from, read_parquet } from '@buckdb/isomorphic'\n\n// Parse command line argument\n// const msg = process.argv[2] || ''\n// console.log(`Hello ${msg}`)\n\n// Initialize BuckDB with remote connection\n\n// await from(read_parquet('/datasets/sources/*.parquet', { union_by_name: true }), 'T1')\n//     .leftJoin('/datasets/communes.parquet', 'geo', ({ T1, geo }) => T1.zipcode === geo.code_postal)\n//     .select((e, D) => ({\n//         ...e,\n//         lat: D.nullif(e.lat.as('Double'), D.cast(e.latitude, 'Double')),\n//         lng: D.nullif(e.lng.as('Double'), D.cast(e.longitude, 'Double')),\n//     }))\n//     .copyTo('/datasets/sources.v4.parquet')\n\n\n// Define macros using BuckDB's macros API\nlet XD = Buck('rein.duckdb', {\n    preserve_insertion_order: false,\n    max_memory: '32GB',\n    threads: 4,\n    memory_limit: '128GB'\n})\n\nconst rr = await XD\n    .macros(D => ({\n        phone_clean: (a) => D.regexp_replace(a, '[^0-9+]', '', 'g'),\n        phone_fmt2: (a) => D.regexp_replace(a, '^0', ''),\n        phone_fmt3: (a) => D.starts_with(a, '33') ? D.concat('+', a) : a,\n        phone_fmt4: (a) => D.len(a) === 9 ? D.concat('+33', a) : a,\n        phone_fmtn: (a) => D.len(a) < 8 ? null : D.phone_fmt4(D.phone_fmt3(D.phone_fmt2(a))),\n        phormat: (a) => D.phone_fmtn(D.phone_clean(a)),\n        email_clean: (a) => D.regexp_replace(a, '[^a-zA-Z0-9@._-]', '', 'g').lower(),\n        DEBURR: (e) => D.lower(e).strip_accents().regexp_extract_all('[a-z]+').array_to_string(' ').trim(),\n        PHENCODE: (phone) => D.multiply(D.cast(D.substr(phone, 5), 'Bigint'), D.cast(D.right(phone, 4), 'Smallint')),\n        PHDECODE: (phonehash, pr) => D.concat(pr[0], D.cast(D.divide(D.cast(D.cast(phonehash, 'Varchar'), 'Bigint'), D.cast(pr[1], 'Int')), 'Varchar')),\n        ISPHONEOK: (p) => D.regexp_matches(p, '^\\\\+33[67]\\\\d{8}$')\n    })).with(\n        db => ({\n            T3: db.from('/datasets/sources.v4.parquet')\n                .select((e, D) => ({\n                    rid: D.concat(e.dsid, D.md5(e.id)).lower(),\n                    ...e,\n                    email: D.email_clean(e.Email),\n                    phone: D.phormat(e.phone),\n                    firstname: D.DEBURR(e.FirstName),\n                    lastname: D.DEBURR(e.LastName),\n                    lat: D.round(e.lat.as('Double'), 3),\n                    lng: D.round(e.lng.as('Double'), 3),\n                }))\n        }),\n        db => ({\n            T4: db.from('T3')\n                .select((e, D) => ({\n                    ...e,\n                    pr: [D.left(e.phone, 4), D.right(e.phone, 4)],\n                    pid: D.PHENCODE(e.phone),\n                    phone: e.phone,\n                }))\n                .where(e => e.phone.SimilarTo(/^\\+33[67]\\d{8}$/))\n                .union(\n                    db.from('T3')\n                        .select((e, D) => ({\n                            ...e,\n                            phone: null,\n                            pr: null,\n                            pid: null\n                        }))\n                        .where(e => !e.phone.SimilarTo(/^\\+33[67]\\d{8}$/))\n\n                )\n        }),\n        db => ({\n            T5: db.from('T4')\n\n                .select((e, D) => ({\n                    ...e,\n                    rid: D.left(e.rid, 14),\n                    tokens: D.list_distinct(\n                        D.regexp_extract_all(\n                            D.concat(\n                                D.replace(D.replace(D.string_split(e.email, '@')[0], e.firstname, ':'), e.lastname, ':'),\n                                ' ',\n                                e.firstname,\n                                ' ',\n                                e.lastname\n                            ),\n                            '[a-z]+'\n                        )\n                    ),\n                    location: D.concat(e.address, e.location, e.City),\n                    infos: D.struct_pack(e.occupation, e.birthdate, e.company, e.siret, e.vat)\n                }))\n                .where((e, D) =>\n                    D.len(e.firstname) > 2 && D.len(e.firstname) < 30 && D.len(e.lastname) > 2 && D.len(e.lastname) < 30\n                )\n                .orderBy('firstname')\n        }),\n        db => ({\n            final: db.from('T5')\n                .select((e, D) => ({\n                    seqid: D.Raw('row_number() over()'),\n                    ...e\n                }))\n        })\n    ).from('final').copyTo('/datasets/final.v8.parquet')\n    .execute()\nconsole.log({ rr })\n\n\n\n\n// await q.from('final').select().exec()\n\n// console.log({ rrr })\n// .from('final').copyTo('/datasets/final.v8.parquet').execute()\n\n// Copy results to local files\n// await result\n\n// Create token index\n// await result.from('final')\n//     .select((e, D) => ({\n//         t: D.unnest(e.tokens),\n//         seqid: e.seqid\n//     }))\n//     .orderBy('t')\n//     .copyTo('/datasets/tindex.v8.parquet')\n\n// // Create mobile subset\n// await result.from('final')\n//     .where(e => e.pr[0] === '+336' || e.pr[0] === '+337')\n//     .copyTo('/datasets/mobile.v8.parquet')\n\n// console.log('Data transformation completed successfully')\n";export{e as default};
