const e="\ntype StripSpecialChars<S> = S extends `${infer First}${infer Rest}` ? First extends AlphaNumeric ? `${First}${StripSpecialChars<Rest>}` : StripSpecialChars<Rest> : ''\nexport type DeriveName<Path> = Path extends `${infer _}/${infer Rest}` ? DeriveName<Rest> : Path extends `${infer Name}.${string}` ? StripSpecialChars<Name> : StripSpecialChars<Path>\n\n\ntype AlphaNumeric = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '_'\nexport const deriveName = <T extends string>(value: T): DeriveName<T> => {\n    const result = value.split('/').pop()?.split('.').shift() || value\n    return result.replace(/[^a-zA-Z0-9_]/g, '') as DeriveName<T>\n}\n\nexport type Dict = Record<string, any>\n\nexport const wrap = (value: string, charA: string, charB = charA): string => {\n    if (value[0] === charA && value[value.length - 1] === charB) {\n        return value\n    }\n    return `${charA}${value}${charB}`\n}\n\n\n\nexport const upperFirst = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\nexport const last = (arr: any[]) => {\n    return arr[arr.length - 1]\n}\n\nexport const isPlainObject = (obj: any) => {\n    return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nexport const Î£ = (...values: any[]) => {\n    const rtn: Record<string, any> = {}\n    for (let i in values) {\n        rtn[values[i]] = +i + 1\n    }\n    return rtn\n}\n\nexport const keyBy = <T extends object, K extends keyof T>(array: T[], key: K): Record<string, T> => {\n    return array.reduce((acc, obj) => {\n        const keyValue = obj[key]\n        acc[keyValue as unknown as string] = obj\n        return acc\n    }, {} as Record<string, T>)\n}\n\nexport const maxBy = <T>(array: T[], key: (item: T) => number): T | undefined => {\n    if (array.length === 0) return undefined\n    return array.reduce((max, item) => (key(item) > key(max) ? item : max), array[0])\n}\n\nexport const isBucket = e => e?.match(/^(\\/\\w+|\\w+\\:\\/\\/)/) && !e.match(/\\.\\w+$/)\n\nexport const isFile = (str: string) => str.match(/\\.\\w{2,16}$/)\n\nexport const isDirectory = (str: string) => !str.match(/\\.\\w{2,16}$/)\nexport const isFunction = (str: string) => str.match(/\\)\\;*$/) \n";export{e as default};
