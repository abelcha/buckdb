const e="\nimport { builder } from './src/build'\nimport { delta_scan, parquet_scan, read_csv, read_json, read_json_objects, read_parquet, read_text, read_xlsx } from './io.ts'\nexport { delta_scan, parquet_scan, read_csv, read_json, read_json_objects, read_parquet, read_text, read_xlsx }\nimport { BuckDBBase } from './core'\n\nclass BuckDBRemote extends BuckDBBase {\n    readonly type = 'remote' as const\n\n    async ensureSchema(uri: string) {\n        // todo\n    }\n\n    async remoteQuery(query: string): Promise<{ data: Record<string, any>[]; meta: { name: string, type: string }[] }> {\n        const resp = await fetch('/duckdb?default_format=JSONCompact', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: query\n        })\n\n        if (!resp.ok) {\n            const text = await resp.text()\n            throw new Error(`Remote query failed (${resp.status}): ${text}`)\n        }\n\n        return resp.json()\n    }\n\n    private async _executeQueuedCommands(): Promise<void> {\n        const cmds = this.queue.flush()\n        if (cmds.length > 0) {\n            for await (const cmd of cmds) {\n                await this.remoteQuery(cmd)\n            }\n        }\n    }\n\n    async query(sql: string, opts: { rows?: boolean; withSchema?: boolean } = {}): Promise<Record<string, any>[]> {\n        await this._executeQueuedCommands() // Ensure setup commands run first\n        const { data, meta } = await this.remoteQuery(this.queue.getUsedDB() + sql)\n        // console.log({ rtn })\n        const rtn = opts?.rows ? data : data.map(row => {\n            const result: Record<string, any> = {}\n            for (let i = 0; i < meta.length; i++) {\n                result[meta[i].name] = row[i]\n            }\n            return result\n        })\n        if (opts?.withSchema && !sql.trim().toUpperCase().startsWith('COPY')) {\n            const schema = meta.map(({ name, type }) => ({ column_name: name, column_type: type }))\n            Object.defineProperty(rtn, 'schema', { value: schema, enumerable: false })\n        }\n        return rtn\n    }\n\n    async run(sql: string): Promise<void> {\n        await this._executeQueuedCommands() // Ensure setup commands run first\n        await this.remoteQuery(sql)\n    }\n}\nexport const Buck = builder(BuckDBRemote)\nexport const MemoryDB = Buck('')\nexport const from = MemoryDB.from\n";export{e as default};
