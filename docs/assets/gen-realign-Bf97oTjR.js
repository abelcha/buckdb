const n="import { Buck, from } from \"./node\"\nimport { extractReconciledCalls } from \"./src/extractor\"\nimport { alignExpressionWithSql } from \"./src/realign\"\n\nif (import.meta.main) {\n    let i = 0\n    const processFile = async (content: string) => {\n        if (!Buck || !from) return\n        const parts = extractReconciledCalls(content)\n        for (const part of parts) {\n            const expression = part.expression.replace('.execute()', '')\n            const sql = eval(`${expression}.toSql({ trim: true })`)\n            const alignment = alignExpressionWithSql(expression, sql)\n\n            console.log(`it('realign 01-getting-started.ts #${i++}', () => `)\n            console.log(`expectAlignment(` +\n                [sql, expression, alignment].map(s => '`\\n' + s.replaceAll(/`/g, '\\\\`').replaceAll(/\\$/g, '\\\\$') + '`').join(',')\n                +\n                `))`)\n            // console.log('const sqlized = `\\n' + sql + '`')\n            // console.log('const expression = `\\n' + expression + '`')\n            // console.log('expect(alignExpressionWithSql(expression, sqlized)).toBe(`\\n' + alignment + '`.trimStart())')\n            // console.log('})')\n            console.log('// ====================')\n            // console.log('Expression:', expression)\n            // console.log('SQL:', sql)\n            // console.log('Alignment:', alignment)\n        }\n    }\n    if (!Bun.file(Bun.argv[2]).exists()) {\n        console.error(`File not found: ${Bun.argv[2]}`);\n        process.exit(1);\n    }\n    processFile(await Bun.file(Bun.argv[2]).text())\n\n    // console.log()\n}\n";export{n as default};
