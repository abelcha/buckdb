const e="import { describe, expect, it } from 'bun:test'\nimport { mapTypes, mapTypesProps, TypeProps, PatternMatchers } from './typedef'\n\ndescribe('typedef', () => {\n    it('mapTypesProps', () => {\n        expect(mapTypesProps('[]', true)).toHaveProperty('rawType', 'any[]')\n        expect(mapTypesProps('VARCHAR[]', true)).toHaveProperty('rawType', 'string[]')\n        expect(mapTypesProps('VARCHAR[]', false)).toHaveProperty('rawType', 'any[]')\n        expect(mapTypesProps('TIMESTAMP', true)).toHaveProperty('rawType', 'Date')\n        expect(mapTypesProps('INTEGER', true)).toHaveProperty('rawType', 'number')\n        expect(mapTypesProps('BOOLEAN', true)).toHaveProperty('rawType', 'boolean')\n        expect(mapTypesProps('STRUCT', true)).toHaveProperty('rawType', 'Record<string,any>')\n        expect(mapTypesProps('VARCHAR', true)).toHaveProperty('rawType', 'string')\n    })\n    it('should map SQL types correctly', () => {\n        expect(mapTypes('VARCHAR')).toBe('DVarchar')\n        expect(mapTypes('INTEGER')).toBe('DNumeric')\n        expect(mapTypes('BOOLEAN')).toBe('DBool')\n        \n        // Test array types\n        expect(mapTypes('VARCHAR[]')).toBe('DArray')\n        expect(mapTypes('STRUCT')).toBe('DStruct')\n        \n        // Type system test - checking TypeProps has expected structure\n        const hasExpectedProps = TypeProps.DVarchar.field === 'DVarcharField'\n        expect(hasExpectedProps satisfies boolean).toBe(true)\n    })\n\n    it('should handle pattern matchers', () => {\n        expect(PatternMatchers.Like.keyword).toBe('LIKE')\n        expect(PatternMatchers.Between.keyword).toBe('BETWEEN')\n        expect(PatternMatchers.IsNull.keyword).toBe('IS NULL')\n    })\n})";export{e as default};
