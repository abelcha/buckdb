const e="import { describe, expect, it } from 'bun:test'\nimport { CommandQueue } from '@buckdb/core'\n\ndescribe('CommandQueue', () => {\n    it('should initialize with empty queue', () => {\n        const queue = new CommandQueue()\n        expect(queue.queue).toEqual([])\n    })\n\n    it('should push settings correctly', () => {\n        const queue = new CommandQueue()\n        const result = queue.pushSettings({ 'memory_limit': '1GB', 'threads': 4 })\n        expect(result).toBe(queue) // returns this for chaining\n        expect(queue.queue).toEqual([`SET memory_limit = '1GB'; SET threads = '4'`])\n    })\n\n    it('should push attach with readonly option', () => {\n        const queue = new CommandQueue()\n        queue.pushAttach('/path/to/db', 'mydb', { readonly: true })\n        expect(queue.queue).toEqual([\n            `ATTACH IF NOT EXISTS '/path/to/db' AS mydb (READONLY)`,\n            `USE mydb`\n        ])\n    })\n\n    it('should push official extensions', () => {\n        const queue = new CommandQueue()\n        queue.pushExtensions('json', 'parquet')\n        expect(queue.queue).toEqual([\n            `INSTALL 'json' ;LOAD 'json';`,\n            `INSTALL 'parquet' ;LOAD 'parquet';`\n        ])\n    })\n\n    it('should flush and reset queue', () => {\n        const queue = new CommandQueue()\n        queue.pushSettings({ threads: 4 })\n        queue.pushAttach('/db', 'test')\n        \n        const flushed = queue.flush()\n        expect(flushed).toEqual([\n            `SET threads = '4'`,\n            `ATTACH IF NOT EXISTS '/db' AS test `,\n            `USE test`\n        ])\n        expect(queue.queue).toEqual([]) // should be empty after flush\n    })\n})\n";export{e as default};
